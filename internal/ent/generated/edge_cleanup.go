// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/privacy"
)

func APITokenEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup apitoken edge"))

	return nil
}

func ContactEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup contact edge"))

	return nil
}

func ContactHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup contacthistory edge"))

	return nil
}

func DocumentDataEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup documentdata edge"))

	return nil
}

func DocumentDataHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup documentdatahistory edge"))

	return nil
}

func EmailVerificationTokenEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup emailverificationtoken edge"))

	return nil
}

func EntitlementEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitlement edge"))

	return nil
}

func EntitlementHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitlementhistory edge"))

	return nil
}

func EntitlementPlanEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitlementplan edge"))

	return nil
}

func EntitlementPlanFeatureEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitlementplanfeature edge"))

	return nil
}

func EntitlementPlanFeatureHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitlementplanfeaturehistory edge"))

	return nil
}

func EntitlementPlanHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitlementplanhistory edge"))

	return nil
}

func EntityEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entity edge"))

	return nil
}

func EntityHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entityhistory edge"))

	return nil
}

func EntityTypeEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitytype edge"))

	return nil
}

func EntityTypeHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitytypehistory edge"))

	return nil
}

func EventEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup event edge"))

	return nil
}

func EventHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup eventhistory edge"))

	return nil
}

func FeatureEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup feature edge"))

	return nil
}

func FeatureHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup featurehistory edge"))

	return nil
}

func FileEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup file edge"))

	return nil
}

func FileHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup filehistory edge"))

	return nil
}

func GroupEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup group edge"))

	return nil
}

func GroupHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup grouphistory edge"))

	return nil
}

func GroupMembershipEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupmembership edge"))

	return nil
}

func GroupMembershipHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupmembershiphistory edge"))

	return nil
}

func GroupSettingEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupsetting edge"))

	return nil
}

func GroupSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupsettinghistory edge"))

	return nil
}

func HushEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup hush edge"))

	return nil
}

func HushHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup hushhistory edge"))

	return nil
}

func IntegrationEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup integration edge"))

	return nil
}

func IntegrationHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup integrationhistory edge"))

	return nil
}

func InviteEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup invite edge"))

	return nil
}

func NoteEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup note edge"))

	return nil
}

func NoteHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup notehistory edge"))

	return nil
}

func OauthProviderEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup oauthprovider edge"))

	return nil
}

func OauthProviderHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup oauthproviderhistory edge"))

	return nil
}

func OhAuthTooTokenEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup ohauthtootoken edge"))

	return nil
}

func OrgMembershipEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgmembership edge"))

	return nil
}

func OrgMembershipHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgmembershiphistory edge"))

	return nil
}

func OrganizationEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup organization edge"))

	return nil
}

func OrganizationHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup organizationhistory edge"))

	return nil
}

func OrganizationSettingEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup organizationsetting edge"))

	return nil
}

func OrganizationSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup organizationsettinghistory edge"))

	return nil
}

func PasswordResetTokenEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup passwordresettoken edge"))

	return nil
}

func PersonalAccessTokenEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup personalaccesstoken edge"))

	return nil
}

func SubscriberEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup subscriber edge"))

	return nil
}

func TFASettingEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup tfasetting edge"))

	return nil
}

func TemplateEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup template edge"))

	return nil
}

func TemplateHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup templatehistory edge"))

	return nil
}

func UserEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup user edge"))

	return nil
}

func UserHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup userhistory edge"))

	return nil
}

func UserSettingEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup usersetting edge"))

	return nil
}

func UserSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup usersettinghistory edge"))

	return nil
}

func WebauthnEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup webauthn edge"))

	return nil
}

func WebhookEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup webhook edge"))

	return nil
}

func WebhookHistoryEdgeCleanup(ctx context.Context, id string) error {
	// If a user has access to delete the object, they have access to delete all edges
	ctx = privacy.DecisionContext(ctx, privacy.Allowf("cleanup webhookhistory edge"))

	return nil
}
